//this works as is to create a single checked item, but has no back end code for toggleing the check yet
#define TOGGLE_CHECKBOX(PARENT, CHILD) PARENT/CHILD/abstract = TRUE;PARENT/CHILD/checkbox = CHECKBOX_TOGGLE;PARENT/CHILD/verb/CHILD

//Example usage TOGGLE_CHECKBOX(datum/verbs/menu/settings/Ghost/chatterbox, toggle_ghost_ears)()

/datum/verbs/menu/settings
	name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"

//override because we don't want to save preferences twice.
/datum/verbs/menu/settings/Set_checked(client/C, verbpath)
	if (checkbox == CHECKBOX_GROUP)
		C.prefs.menuoptions[type] = verbpath
	else if (checkbox == CHECKBOX_TOGGLE)
		var/checked = Get_checked(C)
		C.prefs.menuoptions[type] = !checked
		winset(C, "[verbpath]", "is-checked = [!checked]")

/datum/verbs/menu/settings/verb/setup_character()
	set name = " ! –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
	set desc = "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
	usr.client.prefs.current_tab = 2
	usr.client.prefs.ShowChoices(usr)

/datum/verbs/menu/settings/verb/setup_sound()
	set name = " ! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–∞"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
	set desc = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞"
	new /datum/sound_panel(usr)

/datum/verbs/menu/settings/verb/setup_chat()
	set name = " ! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
	set desc = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"
	new /datum/chat_settings_panel(usr)

/datum/verbs/menu/settings/verb/stop_client_sounds()
	set name = "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤—É–∫–∏"
	set category = "–û—Å–æ–±–µ–Ω–Ω–æ–µ"
	set desc = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤—É–∫–∏"
	SEND_SOUND(usr, sound(null))
	var/client/C = usr.client
	C?.tgui_panel?.stop_music()
	SSblackbox.record_feedback("nested tally", "preferences_verb", 1, list("Stop Self Sounds")) //If you are copy-pasting this, ensure the 2nd parameter is unique to the new proc!

GLOBAL_LIST_INIT(ghost_forms, sort_list(list("ghost","ghostking","ghostian2","skeleghost","ghost_red","ghost_black", \
							"ghost_blue","ghost_yellow","ghost_green","ghost_pink", \
							"ghost_cyan","ghost_dblue","ghost_dred","ghost_dgreen", \
							"ghost_dcyan","ghost_grey","ghost_dyellow","ghost_dpink", "ghost_purpleswirl","ghost_funkypurp","ghost_pinksherbert","ghost_blazeit",\
							"ghost_mellow","ghost_rainbow","ghost_camo","ghost_fire", "catghost")))
/client/proc/pick_form()
	var/new_form = input(src, "Choose your ghostly form:","Thanks for supporting BYOND",null) as null|anything in GLOB.ghost_forms
	if(new_form)
		prefs.ghost_form = new_form
		prefs.save_preferences()
		if(isobserver(mob))
			var/mob/dead/observer/O = mob
			O.update_icon(new_form)

GLOBAL_LIST_INIT(ghost_orbits, list(GHOST_ORBIT_CIRCLE,GHOST_ORBIT_TRIANGLE,GHOST_ORBIT_SQUARE,GHOST_ORBIT_HEXAGON,GHOST_ORBIT_PENTAGON))

/client/proc/pick_ghost_orbit()
	var/new_orbit = input(src, "Choose your ghostly orbit:","Thanks for supporting BYOND",null) as null|anything in GLOB.ghost_orbits
	if(new_orbit)
		prefs.ghost_orbit = new_orbit
		prefs.save_preferences()
		if(isobserver(mob))
			var/mob/dead/observer/O = mob
			O.ghost_orbit = new_orbit

/client/proc/pick_ghost_accs()
	var/new_ghost_accs = tgui_alert(usr,"Do you want your ghost to show full accessories where possible, hide accessories but still use the directional sprites where possible, or also ignore the directions and stick to the default sprites?",,list("full accessories", "only directional sprites", "default sprites"))
	if(new_ghost_accs)
		switch(new_ghost_accs)
			if("full accessories")
				prefs.ghost_accs = GHOST_ACCS_FULL
			if("only directional sprites")
				prefs.ghost_accs = GHOST_ACCS_DIR
			if("default sprites")
				prefs.ghost_accs = GHOST_ACCS_NONE
		prefs.save_preferences()
		if(isobserver(mob))
			var/mob/dead/observer/O = mob
			O.update_icon()

/client/verb/pick_ghost_customization()
	set name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑—Ä–∞–∫–∞"
	set category = "–ü—Ä–∏–∑—Ä–∞–∫"
	switch(tgui_alert("–ß—Ç–æ —Ö–æ—Ç–∏–º —Å–º–µ–Ω–∏—Ç—å?",,list("–§–æ—Ä–º–∞","–¢–∏–ø –æ—Ä–±–∏—Ç—ã","–ü–æ–±—Ä—è–∫—É—à–∫–∏")))
		if("–§–æ—Ä–º–∞")
			pick_form()
		if("–¢–∏–ø –æ—Ä–±–∏—Ç—ã")
			pick_ghost_orbit()
		if("–ü–æ–±—Ä—è–∫—É—à–∫–∏")
			pick_ghost_accs()

/client/verb/pick_ghost_others()
	set name = "–í–∏–¥ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–∑—Ä–∞–∫–æ–≤"
	set category = null
	set desc = "Change display settings for the ghosts of other players."
	var/new_ghost_others = tgui_alert(usr, "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ —É–±—Ä–∞—Ç—å –∏—Ö –ø–æ–±—Ä—è–∫—É—à–∫–∏?",,list("–ò—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ø—Ä–∞–π—Ç—ã", "–ë–µ–ª—ã–µ –ø—Ä–∏–∑—Ä–∞–∫–∏"))
	if(new_ghost_others)
		switch(new_ghost_others)
			if("–ò—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
				prefs.ghost_others = GHOST_OTHERS_THEIR_SETTING
			if("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ø—Ä–∞–π—Ç—ã")
				prefs.ghost_others = GHOST_OTHERS_DEFAULT_SPRITE
			if("–ë–µ–ª—ã–µ –ø—Ä–∏–∑—Ä–∞–∫–∏")
				prefs.ghost_others = GHOST_OTHERS_SIMPLE
		prefs.save_preferences()
		if(isobserver(mob))
			var/mob/dead/observer/O = mob
			O.update_sight()

/client/verb/toggle_intent_style()
	set name = "üîÑ –ú–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤"
	set category = null
	set desc = "Toggle between directly clicking the desired intent or clicking to rotate through."
	prefs.toggles ^= INTENT_STYLE
	to_chat(src, "[(prefs.toggles & INTENT_STYLE) ? "–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ—Ç –µ–≥–æ." : "–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ª—é–±–æ–π —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±—É–¥–µ—Ç —Å–º–µ–Ω—è—Ç—å –∏—Ö –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ."]")
	prefs.save_preferences()
	SSblackbox.record_feedback("nested tally", "preferences_verb", 1, list("Toggle Intent Selection", "[prefs.toggles & INTENT_STYLE ? "Enabled" : "Disabled"]")) //If you are copy-pasting this, ensure the 2nd parameter is unique to the new proc!

/client/verb/toggle_ghost_hud_pref()
	set name = "üîÑ HUD –ø—Ä–∏–∑—Ä–∞–∫–∞"
	set category = "–ü—Ä–∏–∑—Ä–∞–∫"

	prefs.ghost_hud = !prefs.ghost_hud
	to_chat(src, "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π HUD —Ç–µ–ø–µ—Ä—å [prefs.ghost_hud ? "–≤–∏–¥–µ–Ω" : "–Ω–µ –≤–∏–¥–µ–Ω"].")
	prefs.save_preferences()
	if(isobserver(mob))
		mob.hud_used.show_hud()
	SSblackbox.record_feedback("nested tally", "preferences_verb", 1, list("Toggle Ghost HUD", "[prefs.ghost_hud ? "Enabled" : "Disabled"]"))

/client/verb/toggle_inquisition() // warning: unexpected inquisition
	set name = "üîÑ –ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ"
	set category = "–ü—Ä–∏–∑—Ä–∞–∫"

	prefs.inquisitive_ghost = !prefs.inquisitive_ghost
	prefs.save_preferences()
	if(prefs.inquisitive_ghost)
		to_chat(src, span_notice("–ë—É–¥—É –∏–∑—É—á–∞—Ç—å –≤—Å–µ, –Ω–∞ —á—Ç–æ –Ω–∞–∂–∏–º–∞—é."))
	else
		to_chat(src, span_notice("–ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—à—å –∏–∑—É—á–∞—Ç—å —Ç–æ, –Ω–∞ —á—Ç–æ –Ω–∞–∂–∏–º–∞—é."))
	SSblackbox.record_feedback("nested tally", "preferences_verb", 1, list("Toggle Ghost Inquisitiveness", "[prefs.inquisitive_ghost ? "Enabled" : "Disabled"]"))

//Admin Preferences
/client/proc/toggleadminhelpsound()
	set name = "Hear/Silence Adminhelps"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏.–ê–¥–º"
	set desc = "Toggle hearing a notification when admin PMs are received"
	if(!holder)
		return
	prefs.toggles ^= SOUND_ADMINHELP
	prefs.save_preferences()
	to_chat(usr, "You will [(prefs.toggles & SOUND_ADMINHELP) ? "now" : "no longer"] hear a sound when adminhelps arrive.")
	SSblackbox.record_feedback("nested tally", "admin_toggle", 1, list("Toggle Adminhelp Sound", "[prefs.toggles & SOUND_ADMINHELP ? "Enabled" : "Disabled"]")) //If you are copy-pasting this, ensure the 2nd parameter is unique to the new proc!

/client/proc/toggleannouncelogin()
	set name = "Do/Don't Announce Login"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏.–ê–¥–º"
	set desc = "Toggle if you want an announcement to admins when you login during a round"
	if(!holder)
		return
	prefs.toggles ^= ANNOUNCE_LOGIN
	prefs.save_preferences()
	to_chat(usr, "You will [(prefs.toggles & ANNOUNCE_LOGIN) ? "now" : "no longer"] have an announcement to other admins when you login.")
	SSblackbox.record_feedback("nested tally", "admin_toggle", 1, list("Toggle Login Announcement", "[prefs.toggles & ANNOUNCE_LOGIN ? "Enabled" : "Disabled"]")) //If you are copy-pasting this, ensure the 2nd parameter is unique to the new proc!

/client/proc/toggle_hear_radio()
	set name = "Show/Hide Radio Chatter"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏.–ê–¥–º"
	set desc = "Toggle seeing radiochatter from nearby radios and speakers"
	if(!holder)
		return
	prefs.chat_toggles ^= CHAT_RADIO
	prefs.save_preferences()
	to_chat(usr, "You will [(prefs.chat_toggles & CHAT_RADIO) ? "now" : "no longer"] see radio chatter from nearby radios or speakers")
	SSblackbox.record_feedback("nested tally", "admin_toggle", 1, list("Toggle Radio Chatter", "[prefs.chat_toggles & CHAT_RADIO ? "Enabled" : "Disabled"]")) //If you are copy-pasting this, ensure the 2nd parameter is unique to the new proc!

/client/proc/deadchat()
	set name = "Show/Hide Deadchat"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏.–ê–¥–º"
	set desc ="Toggles seeing deadchat"
	if(!holder)
		return
	prefs.chat_toggles ^= CHAT_DEAD
	prefs.save_preferences()
	to_chat(src, "You will [(prefs.chat_toggles & CHAT_DEAD) ? "now" : "no longer"] see deadchat.")
	SSblackbox.record_feedback("nested tally", "admin_toggle", 1, list("Toggle Deadchat Visibility", "[prefs.chat_toggles & CHAT_DEAD ? "Enabled" : "Disabled"]")) //If you are copy-pasting this, ensure the 2nd parameter is unique to the new proc!

/client/proc/toggleprayers()
	set name = "Show/Hide Prayers"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏.–ê–¥–º"
	set desc = "Toggles seeing prayers"
	if(!holder)
		return
	prefs.chat_toggles ^= CHAT_PRAYER
	prefs.save_preferences()
	to_chat(src, "You will [(prefs.chat_toggles & CHAT_PRAYER) ? "now" : "no longer"] see prayerchat.")
	SSblackbox.record_feedback("nested tally", "admin_toggle", 1, list("Toggle Prayer Visibility", "[prefs.chat_toggles & CHAT_PRAYER ? "Enabled" : "Disabled"]")) //If you are copy-pasting this, ensure the 2nd parameter is unique to the new proc!

/client/proc/toggle_prayer_sound()
	set name = "Hear/Silence Prayer Sounds"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏.–ê–¥–º"
	set desc = "Hear Prayer Sounds"
	if(!holder)
		return
	prefs.toggles ^= SOUND_PRAYERS
	prefs.save_preferences()
	to_chat(usr, "You will [(prefs.toggles & SOUND_PRAYERS) ? "now" : "no longer"] hear a sound when prayers arrive.")
	SSblackbox.record_feedback("nested tally", "admin_toggle", 1, list("Toggle Prayer Sounds", "[usr.client.prefs.toggles & SOUND_PRAYERS ? "Enabled" : "Disabled"]"))

/client/proc/colorasay()
	set name = "Set Admin Say Color"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏.–ê–¥–º"
	set desc = "Set the color of your ASAY messages"
	if(!holder)
		return
	if(!CONFIG_GET(flag/allow_admin_asaycolor))
		to_chat(src, "Custom Asay color is currently disabled by the server.")
		return
	var/new_asaycolor = input(src, "Please select your ASAY color.", "ASAY color", prefs.asaycolor) as color|null
	if(new_asaycolor)
		prefs.asaycolor = sanitize_ooccolor(new_asaycolor)
		prefs.save_preferences()
	SSblackbox.record_feedback("tally", "admin_verb", 1, "Set ASAY Color")
	return

/client/proc/resetasaycolor()
	set name = "Reset your Admin Say Color"
	set desc = "Returns your ASAY Color to default"
	set category = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏.–ê–¥–º"
	if(!holder)
		return
	if(!CONFIG_GET(flag/allow_admin_asaycolor))
		to_chat(src, "Custom Asay color is currently disabled by the server.")
		return
	prefs.asaycolor = initial(prefs.asaycolor)
	prefs.save_preferences()
